openapi: '3.0.2'
info:
  title: PlaDat APIs
  version: '1.0'
servers:
  - url: http://localhost:3000/
    description: Local development environment
  - url: https://pladat.herokuapp.com/
    description: Production backend server
  - url: https://pladat-staging.herokuapp.com/
    description: Staging backend server
  
tags:
  - name: Skills
    description: Endpoints related to skills of students, or skills required by placements
  - name: Education
    description: Endpoints related to the education experience of a student
  - name: Placement
    description: Endpoints related to placement management and information
  - name: Student
    description: Endpoints related to the student profile
  - name: Matching
    description: Endpoints related to the recommendations system (matching algorithm) and matching management
  - name: Employer
    description: Endpoints related to the employer profile
  - name: Location
    description: Endpoints related to location management
  - name: Registration
    description: Endpoints related to authentication and authorization
  - name: Message
    description: Endpoints related to conversations between matching parties

components:
  securitySchemes:
      bearerAuth:            # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT
  schemas:
    Degree:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
    Student:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
        surname: 
          type: string
        email: 
          type: string
        password: 
          type: string
          format: password
        description: 
          type: string 
        location:
          type: object
          properties:
            country:
              type: string
            city:
              type: string
        skills:
          type: object
          properties: 
            technicalSkills: 
              type: array
              items:
                $ref: "#/components/schemas/Skill"
            softSkills: 
              type: array
              items:
                $ref: "#/components/schemas/Skill"
        work: 
          type: array
          items:
            $ref: "#/components/schemas/Work"
        education:
          type: array
          items: 
            $ref: "#/components/schemas/Education"

    Employer:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
        location:
          type: object
          $ref: '#/components/schemas/Location'
        domain_of_activity_id: 
          type: integer
    Match:
      type: object
      properties:
        studentID:
          type: integer
        placementID: 
          type: integer
        studentAccept: 
          type: boolean
        placementAccept:
          type: boolean
        status:
          type: string
          enum:
            - ACCEPTED
            - REJECTED
            - PENDING
    Placement:
      type: object
      properties:
        id:
          type: integer
        position: 
          type: string
        employement_type:
          type: string
        start_period: 
          type: string
          format: date-time
        end_period:
          type: string
          format: date-time
        salary:
          type: integer
        description_role:
          type: string
        employer_id:
          type: integer
        status:
          type: string
    Institution:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Major:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
    Skill:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
        type:
          type: string
          enum:
            - TECH
            - SOFT
            - OTHER
    Location:
      type: object
      properties:
        id: 
          type: integer
        country: 
          type: string
        city:
          type: string
    Message:
      type: object
      properties:          
        student_id:
          type: integer
        employer_id:
          type: integer
        message:
          type: string
        send_date: 
          type: string
          format: date-time
        sender:
          type: string
          enum:
            - STUDENT
            - EMPLOYER
    Registration:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password:
          type: string
        type:
          type: string
          enum: 
            - EMPLOYER
            - STUDENT
    Work:
      type: object
      properties:
        id:
          type: integer
        companyName:
          type: string
        position:
          type: string
        description:
          type: string
        workPeriod: 
          type: string
    Education: 
      type: object
      properties:
        id:
          type: integer
        majorId:
          type: integer
        degreeId:
          type: integer
        institutionId:
          type: integer
        description: 
          type: string
        period: 
          type: string
    Domain of Activity: 
      type: object
      properties:
        id: 
          type: integer
        name: 
          type: string

        
        
paths:
  /registration:
    post:
      description: Allows users to register to the application
      tags:
        - "Registration"
      requestBody:
        description: A json containing all the information about the user. The type can be "STUDENT" or "EMPLOYER"
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  email: "paolo@gmail.com",
                  password: "S4f3PvvD1!2089",
                  type: "STUDENT"
                }
      responses:
        '200':
          description: Returns a json with the newly inserted user, without the hashed password
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    id: 2,
                    email: "paolo@gmail.com",
                    type: "STUDENT"
                  }
        '500':
          description: 'There has been a problem saving your registration. Please try again'
  /login:
    post:
      description: Allows users to login to the application
      tags:
        - "Registration"
      requestBody:
        description: A json containing the email and the password of the user
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  email: "paolo@gmail.com",
                  password: "S4f3PvvD1!2089"
                }
      responses:
        '200':
          description: Returns a JSON object with the information about the logged in accont and the JWT token used for authorization. The token must be sent with every call to the backend, in the headers, in the key "authorization" and it should have the form "Bearer eyJhbGciOiJIUzI1NiIsInR5c[...]"
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "userID": 60,
                    "student": true,
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NjAsInVzZXJUeXBlIjoiU1RVREVOVCIsImlhdCI6MTYwOTAwOTg5MSwiZXhwIjoxNjA5MDEyNDgzfQ.UcUheC-M-7GbzpoZ6dV_p3luQ_pcipzRDrgPUedIh4M"
                  }
        '401':
          description: 'Unauthorized. The credentials are wrong, the login has failed.'
  /employer/{id}:
    get:
      security:
        - bearerAuth: []
      description: Provides the employer for the provided id 
      tags:
        - "Employer"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Employer"
                example: 
                  {
                    id: 1,
                    name: "Google",
                    location: "Milan, Italy",
                    urllogo: "www.pladat.eu"
                  }
  /employer/{employerId}/placements:
    get:
      security:
        - bearerAuth: []
      description: Provides all the placements of the selected employer id,
      tags:
        - "Employer"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                anyOf:
                  - $ref: "#/components/schemas/Placement"
                example:
                  [
                    {
                      id: 1,
                      position: "Full stack developer",
                      employment_type: 'PART_TIME',
                      start_period: "2020-11-11",
                      end_period: "2020-11-11",
                      salary: 600,
                      description_role: "An internship for you to learn how to be a full stack developer",
                      employer_id: 1,
                      status: 'CLOSED',
                      count_matches: 3
                    }
                  ]
        '403':
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
                example:
                  "You are not allowed to see these placements."

  /employer:
    post:
      description: Allows the user to save their employer profile on the database
      tags:
        - "Employer"
      requestBody:
        description: a json with all the needed informations about the employer
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  name: "Samsung",
                  location: {
                    country: "South Korea",
                    city: "Seul"
                  },
                  description: "A big tech company",
                  domainOfActivityId: 3
                }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: returns a json with the newly inserted employer information
                type: object
                example:
                  {
                    id: 1,
                    name: "Samsung",
                  location: {
                    id: 1,
                    country: "South Korea",
                    city: "Seul"
                    },
                  description: "A big tech company",
                  domain_of_activity_id: 3
                  }
        '400': 
          description: Bad Request
          content:
            text/html:
              schema:
                type: string
                example:
                  "The domain of activity does not exists. Please try again."
        '500':
          description: Internal Server Error
          content: 
            text/html:
              schema:
                type: string
                example:
                  "There has been a problem saving your profile. Please try again"


  /recommendation/{id}/seeStudents:
    get:
      security:
        - bearerAuth: []
      description: Provides all the students recommendation for the provided placement id, based on the algorithm
      tags:
        - "Matching"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                anyOf:
                  - $ref: "#/components/schemas/Student"
                example:
                  [
                    {
                      id: 1,
                      name: "Julian",
                      surname: "Bass",
                      description: "Researching software development for large-scale systems focusing on multi-national teams and using modern lean and agile methods",
                      location: {
                        id: 1,
                        country: United Kingdom,
                        city: Manchester
                      },
                      skills: [
                         {
                           id: 1,
                           name: Flutter,
                           type: TECH
                         },
                         {
                           id: 2,
                           name: Leadership,
                           type: SOFT
                         }
                      ],
                      education: [
                        {
                          major: Computer Science,
                          institution: Hardvard,
                          degree: Master,
                          description: My grade was 100/1000,
                          start_period: 2017-10-11,
                          end_period: 2019-10-11
                        }
                      ],
                      work: [
                        {
                          position: Project manager,
                          company_name: Google,
                          description: a really hard job,
                          start_period: 2019-11-11,
                          end_period: 2020-05-11
                        },
                        {
                          posititon: Developer,
                          company_name: Facebook,
                          description: a really hard job,
                          start_period: 2020-05-12,
                          end_period: 2020-10-12,
                        }
                      ]
                    }
                  ]
        '400': 
          description: Bad Request
          content:
            text/html:
              schema:
                type: string
                example:
                  "Your request does not contains a valid placment id. Please try again"
        '500':
          description: Internal Server Error
          content: 
            text/html:
              schema:
                type: string
                example:
                  "There has been a problem looking up the recommended students. Please try again"
        '403':
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
                example:
                  "You cannot see the recommendations for other employer's placements."



  /recommendation/{id}/seePlacements:
    get:
      security:
        - bearerAuth: []
      description: Provides all placements recommendation for the provided student id, based on the algorithm
      tags:
        - "Matching"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                allOf:
                  - $ref: "#/components/schemas/Placement"
                example:
                  [
                    {
                      id: 1,
                      position: "Full stack developer",
                      employement_type: 'PART_TIME',
                      start_period: "2020-11-11",
                      end_period: "2020-11-11",
                      salary: 600,
                      description_role: "An internship for you to learn how to be a full stack developer",
                      employer_id: 1,
                      status: 'OPEN',
                      majors: [
                        {name: "Computer Science and Engineering"},
                      ],
                      institutions: [
                        {name: "Politecnico di Milano"},
                      ],
                      skills: [
                         {
                           id: 1,
                           name: Flutter,
                           type: TECH
                         },
                         {
                           id: 2,
                           name: Leadership,
                           type: SOFT
                         }
                      ]
                    }
                  ]
        '400': 
          description: Bad Request
          content:
            text/html:
              schema:
                type: string
                example:
                  "Your request does not contains a valid student id. Please try again"
        '500':
          description: Internal Server Error
          content: 
            text/html:
              schema:
                type: string
                example:
                  "There has been a problem looking up the recommended placements. Please try again"
        '403':
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
                example:
                  "You cannot see the recommendations for other students."
  /matching:
    post:
      security:
        - bearerAuth: []
      description: Saves an interaction (accept or reject) that can lead to a match
      tags:
        - "Matching"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: {
                studentID: 1,
                placementID: 2,
                studentAccept: true
              }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Match"
                example:
                  {
                    studentID: 1,
                    placementID: 2,
                    studentAccept: true,
                    placementAccept: true,
                    status: "ACCEPTED"
                  }

  /match/{studentId}/{placementId}:
    delete:
      security:
        - bearerAuth: []
      description: Delete the match based on the given ids
      tags:
        - "Matching"
      parameters:
        - in: path
          required: true
          name: studentId
          schema:
            type: integer
            example: 1
        - in: path
          required: true
          name: placementId
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: integer
                example: 1
        '400':
          description: Bad Request
          content:
            text/html:
              schema:
                type: string
                example:
                  "Your request did not provided valid values for ids. Please try again."
        '403':
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
                example:
                  "You are not authorized to delete this match."



  /placement:
    get:
      security:
        - bearerAuth: []
      description: Returns all placement ids in the database 
      tags:
        - "Placement"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                example: 
                  [
                    {id: 1},
                    {id: 2},
                    {id: 3},
                    {id: 4},
                  ]
  /placement/{id}:
    get:
      security:
        - bearerAuth: []
      description: Returns a placement with the provided id
      tags:
        - "Placement"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                    id: 1,
                    position: "Full stack developer",
                    working_hours: 20,
                    start_period: "2020-11-11",
                    end_period: "2020-11-11",
                    salary: 600,
                    description_role: "An internship for you to learn how to be a full stack developer",
                    employer_id: 1,
                    status: 'OPEN',
                    majors: [
                      {id: 1, name: "Computer Science and Engineering"},
                      {id: 2, name: "Management Engineering"},
                    ],
                    institutions: [
                      {id: 1, name: "Politecnico di Milano"},
                      {id: 1, name: "Politecnico di Torino"},
                    ],
                    skills: {
                      technicalSkills: [
                        {id: 1, name: "Flutter", type: "TECH"},
                        {id: 2, name: "JavaScript", type: "TECH"},
                        {id: 3, name: "Java", type: "TECH"},
                      ],
                      softSkills: [
                        {id: 4, name: "Team Management", type: "SOFT"},
                        {id: 5, name: "Time Management", type: "SOFT"},
                        {id: 6, name: "Communications", type: "SOFT"},
                      ],
                      otherSkills: [
                        {id: 7, name: "Skiing", type: "OTHER"},
                        {id: 8, name: "Cooking", type: "OTHER"},
                        {id: 9, name: "Trekking", type: "OTHER"},
                      ]
                    }
                  }

  /placement/new-placement:
    post:
      security:
        - bearerAuth: []
      description: Allows companies to insert a new placement into the database
      tags:
        - "Placement"
      requestBody:
        description: a json containing all the information about the placement
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Placement'
              type: object
              example:
                {
                  position: "Full stack developer",
                  emplymentType: 'PART_TIME',
                  startPeriod: "2020-11-11",
                  endPeriod: "2020-11-11",
                  salary: 600,
                  descriptionRole: "An internship for you to learn how to be a full stack developer",
                  employer_id: 1,
                  majors: [
                    {id: 1, name: "Computer Science and Engineering"},
                    {id: 2, name: "Management Engineering"},
                  ],
                  institutions: [
                    {id: 1, name: "Politecnico di Milano"},
                    {id: 1, name: "Politecnico di Torino"},
                  ],
                  location: {
                    country: "Italy",
                    city: "Milan"
                  },
                  skills: {
                    technicalSkills: [
                      {id: 1},
                      {id: 2},
                      {id: 3},
                    ],
                    softSkills: [
                      {id: 4},
                      {id: 5},
                      {id: 6},
                    ],
                    otherSkills: [
                      "Artificial Intelligence",
                      "Organizing events",
                      "SCRUM knowledge"
                    ]
                  }
                }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns a json with the newly inserted placement and its id
                type: object
                example:
                  {
                    id: 3,
                    position: "Full stack developer",
                    employment_type: 'PART_TIME',
                    start_period: "2020-11-11",
                    end_period: "2020-11-11",
                    salary: 600,
                    description_role: "An internship for you to learn how to be a full stack developer",
                    employer_id: 1,
                    status: 'OPEN',
                    majors: [
                      {id: 1, name: "Computer Science and Engineering"},
                      {id: 2, name: "Management Engineering"},
                    ],
                    institutions: [
                      {id: 1, name: "Politecnico di Milano"},
                      {id: 1, name: "Politecnico di Torino"},
                    ],
                    location: {
                      country: "Italy",
                      city: "Milan"
                    },
                    skills: {
                      technicalSkills: [
                        {id: 1},
                        {id: 2},
                        {id: 3},
                      ],
                      softSkills: [
                        {id: 4},
                        {id: 5},
                        {id: 6},
                      ],
                      otherSkills: [
                        "Cooking",
                        "Organizing events",
                        "Trekking"
                      ]
                    }
                  }

  /placement/{id}/close:
    put:
      description: changes a placement's status to 'CLOSED'
      tags:
        - "Placement"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content: 
            text/html:
              schema:
                example:
                  Your placement has been closed correctly.
        '400': 
          description: Bad Request
          content:
            text/html:
              schema:
                example:
                  The request does not contains a valid placement id. Please try again.
        '500':
          description: Internal Server Error
          content: 
            text/html:
              schema:
                example:
                  There has been a problem closing your placement. Please try again.



  /majors:
    get:
      security:
        - bearerAuth: []
      description: Returns all the majors in the database
      tags: 
        - "Education"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Major'
                type: array
                example:
                  [
                    {
                      id: 1,
                      name: "Computer Science and Engineering"
                    },
                    {
                      id: 2,
                      name: "Management Engineering"
                    }
                  ]
  /degrees:
    get:
      security:
        - bearerAuth: []
      description: Returns all the degrees in the database
      tags: 
        - "Education"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Degree'
                type: array
                example:
                  [
                    {
                      id: 1,
                      name: "Bachelor"
                    },
                    {
                      id: 2,
                      name: "Master"
                    }
                  ]
  
  /domainOfActivity:
    get:
      description: Returns all the domains of activity in the database
      tags:
        - "Employer"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Domain of Activity'
                type: array
                example:
                  [
                    {
                      id: 1,
                      name: "Agriculture, forestry and fishing"
                    },
                    {
                      id: 2,
                      name: "Mining and quarrying"
                    }
                  ]
        '500':
          description: Internal Server Error
          content: 
            text/html:
              schema:
                type: string
                example:
                  "There has been a problem looking up domains of activity. Please try again"


  /institutions:
    get:
      security:
        - bearerAuth: []
      description: Returns all the institutions in the database
      tags:
        - "Education"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Institution'
                type: array
                example:
                  [
                    {
                      id: 1,
                      name: "Politecnico di Milano"
                    },
                    {
                      id: 2,
                      name: "MDH"
                    },
                    {
                      id: 3,
                      name: "MIT"
                    }
                  ]
  
  /student:
    post:
      security:
        - bearerAuth: []
      description: Allows students to fill in the details of their profile
      tags: 
        - "Student"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Student'
              type: object
              example:
                name: John
                surname: Dow
                email: aa@aaa.com
                description: I am a happy student
                phone: '5478929202'
                location:
                  country: "Italy"
                  city: "Milan"
                education:
                - majorId: 3
                  degreeId: 1
                  institutionId: 3
                  description: Difficult job
                  period: September 2020 - October 2021
                - majorId: 1
                  degreeId: 2
                  institutionId: 1
                  description: Difficult job
                  period: September 2020 - October 2021
                - majorId: 1
                  degreeId: 1
                  institutionId: 4
                  description: Difficult job
                  period: September 2020 - October 2021
                skills:
                  technicalSkills:
                  - id: 1
                  - id: 2
                  softSkills:
                  - id: 17
                  - id: 18
                work:
                - companyName: Google
                  position: Difficult Job
                  description: Difficult job
                  workPeriod: September 2020 - October 2021
                - companyName: Facebook
                  position: Very Difficult Job
                  description: Very Difficult job
                  workPeriod: September 2019 - December 2020

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns a json from the table matching the student id with the skills ids
                example: 
                  id: 129
                  name: John
                  surname: " Edu"
                  email: aa@aaa.com
                  description: desgn
                  phone: '5478929202'
                  location:
                    country: "Italy"
                    city: "Milan"
                  skills:
                  - student: 129
                    skill: 1
                  - student: 129
                    skill: 2
                  - student: 129
                    skill: 17
                  - student: 129
                    skill: 18
        '500':
          description: INTERNAL SERVER ERROR - Offers an explanation about what caused the error
        '403':
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
                example:
                  "You cannot create a student profile from a non-student account."
  /skills:
    get: 
      security:
        - bearerAuth: []
      description: Provides all the skills in the database 
      tags:
        - "Skills"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns a json with all the skills in the DB divided by TECH and SOFT
                type: object
                properties:
                  technicalSkills: 
                    description: All the technical skills in the database
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Skill'
                  softSkills: 
                    description: All the soft skills in the database
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Skill'
                example: {
                  technicalSkills: [
                    {
                      id: 4,
                      name: "JavaScript",
                      type: "TECH"
                    },
                    {
                      id: 5,
                      name: "Flutter",
                      type: "TECH"
                    },
                    {
                      id: 6,
                      name: "Heroku Management",
                      type: "TECH"
                    },
                  ],
                  softSkills: [
                    {
                      id: 1,
                      name: "Time Management",
                      type: "SOFT"
                    },
                    {
                      id: 2,
                      name: "Team Management",
                      type: "SOFT"
                    },
                    {
                      id: 3,
                      name: "Project Management",
                      type: "SOFT"
                    },
                  ]
                }
                
  /skills/{type}/{name}:
    get:
      security:
        - bearerAuth: []
      description: Returns the skill in the database with the given name and type
      deprecated: true
      tags:
        - "Skills"
      parameters:
        - in: path
          required: true
          name: type
          schema:
            type: string
            example: "TECH"
        - in: path
          required: true
          name: name
          schema: 
            type: string
            example: "Flutter"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Skill"
                type: array
                example: 
                  [
                    {
                      id: 1,
                      name: "Flutter",
                      type: "TECH"
                    }
                  ]
  
  /skills/{type}:
    get:
      security:
        - bearerAuth: []
      description: Returns all the skills in the database with the given type
      tags:
        - "Skills"
      parameters:
        - in: path
          name: "type"
          required: true
          schema:
            type: string
            example: "TECH"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Skill"
                type: array
                example: 
                  [
                    {
                      id: 1,
                      name: "JavaScript",
                      type: "TECH"
                    },
                    {
                      id: 2,
                      name: "Flutter",
                      type: "TECH"
                    }
                  ]
  /googleMaps/{input}:
    get:
      security:
        - bearerAuth: []
      description: Provides the required informations retrieved from the Google Maps API
      tags:
        - "Location"
      parameters:
        - in: query
          name: input
          required: true
          schema: 
            example:  "Piazza Leonardo Da Vinci, Milano"
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                example: 
                  {
                    predictions : [
                      {
                        description : "Piazza Leonardo da Vinci, Milano, Metropolitan City of Milan, Italy",
                        matched_substrings : [
                          {
                            length : 24,
                            offset : 0
                          },
                          {
                            length : 6,
                            offset : 26
                          }
                        ],
                        place_id :
                          "EkNQaWF6emEgTGVvbmFyZG8gZGEgVmluY2ksIE1pbGFubywgTWV0cm9wb2xpdGFuIENpdHkgb2YgTWlsYW4sIEl0YWx5Ii4qLAoUChIJJW9DMvLGhkcRzXotUCwiNgYSFAoSCed1Ej9JwYZHEY0OdMYTzf88",
                        reference :
                          "EkNQaWF6emEgTGVvbmFyZG8gZGEgVmluY2ksIE1pbGFubywgTWV0cm9wb2xpdGFuIENpdHkgb2YgTWlsYW4sIEl0YWx5Ii4qLAoUChIJJW9DMvLGhkcRzXotUCwiNgYSFAoSCed1Ej9JwYZHEY0OdMYTzf88",
                        structured_formatting : {
                          main_text : "Piazza Leonardo da Vinci",
                          main_text_matched_substrings : [
                            {
                              length : 24,
                              offset : 0
                            }
                          ],
                          secondary_text : "Milano, Metropolitan City of Milan, Italy",
                          secondary_text_matched_substrings : [
                            {
                              length : 6,
                              offset : 0
                            }
                          ]
                        },
                        terms : [
                          {
                            offset : 0,
                            value : "Piazza Leonardo da Vinci"
                          },
                          {
                            offset : 26,
                            value : "Milano"
                          },
                          {
                            offset : 34,
                            value : "Metropolitan City of Milan"
                          },
                          {
                            offset : 62,
                            value : "Italy"
                          }
                        ],
                        types : [ "route", "geocode" ]
                      },
                      {
                        description : "Piazza Leonardo da Vinci, Basiglio, Metropolitan City of Milan, Italy",
                        matched_substrings : [
                          {
                            length : 24,
                            offset : 0
                          },
                          {
                            length : 26,
                            offset : 36
                          }
                        ],
                        place_id :
                          "EkVQaWF6emEgTGVvbmFyZG8gZGEgVmluY2ksIEJhc2lnbGlvLCBNZXRyb3BvbGl0YW4gQ2l0eSBvZiBNaWxhbiwgSXRhbHkiLiosChQKEglzoKNnZtuGRxEsA7AmwRWvJRIUChIJn7s-7WTbhkcR3pgYQNsPFks",
                        reference :
                          "EkVQaWF6emEgTGVvbmFyZG8gZGEgVmluY2ksIEJhc2lnbGlvLCBNZXRyb3BvbGl0YW4gQ2l0eSBvZiBNaWxhbiwgSXRhbHkiLiosChQKEglzoKNnZtuGRxEsA7AmwRWvJRIUChIJn7s-7WTbhkcR3pgYQNsPFks",
                        structured_formatting : {
                          main_text : "Piazza Leonardo da Vinci",
                          main_text_matched_substrings : [
                            {
                              length : 24,
                              offset : 0
                            }
                          ],
                          secondary_text : "Basiglio, Metropolitan City of Milan, Italy",
                          secondary_text_matched_substrings : [
                            {
                              length : 26,
                              offset : 10
                            }
                          ]
                        },  
                        terms : [
                          {
                            offset : 0,
                            value : "Piazza Leonardo da Vinci"
                          },
                          {
                            offset : 26,
                            value : "Basiglio"
                          },
                          {
                            offset : 36,
                            value : "Metropolitan City of Milan"
                          },
                          {  
                            offset : 64,
                            value : "Italy"
                          }
                        ],
                        types : [ "route", "geocode" ]
                      }
                    ],
                    status : "OK"
                  }

  /student/{studentId}/placements:
    get:
      security:
        - bearerAuth: []
      description: Returns all the placements that a student has been matched with
      tags: 
        - "Matching"
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    placementId: 
                      type: integer
                    position:
                      type: string
                    description_role:
                      type: string
                    employerId:
                      type: integer
                    employer_name:
                      type: string
                example:
                  [
                    {
                        "placementId": 63,
                        "position": "Fullstack Developer",
                        "description_role": "This is a good job",
                        "employerId": 43,
                        "employer_name": "Google"
                    },
                    {
                        "placementId": 61,
                        "position": "Frontend Developer",
                        "description_role": "This is a good job",
                        "employerId": 43,
                        "employer_name": "Google"
                    }
                ]
        '500': 
          description: 'There has been a problem retrieving your matches. Please try again'
        '403':
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
                example:
                  'You are not authorized to retrieve this information'
  /placement/{placementId}/students:
    get:
      security:
        - bearerAuth: []
      description: Returns all the students that a placement has been matched with
      tags: 
        - "Matching"
      parameters:
        - in: path
          name: placementId
          required: true
          schema:
            type: string
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id: 
                      type: integer
                    name:
                      type: string
                    surname:
                      type: string
                    email:
                      type: integer
                    description:
                      type: string
                    phone:
                      type: string
                    skills:
                      type: array
                example:
                  [
                    {
                        "id": 1,
                        "name": "Alice",
                        "surname": "Casali",
                        "email": "abcd@gmail.com",
                        "description": "Engineer student",
                        "phone": 3333333,
                        "skills": [
                            {
                                "id": 1,
                                "name": "JavaScript",
                                "type": "TECH"
                            },
                            {
                                "id": 2,
                                "name": "Java",
                                "type": "TECH"
                            },
                            {
                                "id": 17,
                                "name": "Time Management",
                                "type": "SOFT"
                            },
                            {
                                "id": 18,
                                "name": "Team Management",
                                "type": "SOFT"
                            }
                        ]
                    },
                    {
                        "id": 2,
                        "name": "Fabrizio",
                        "surname": "Siciliano",
                        "email": "abcd@gmail.com",
                        "description": "Engineer student",
                        "phone": 33333333,
                        "skills": [
                            {
                                "id": 2,
                                "name": "Java",
                                "type": "TECH"
                            },
                            {
                                "id": 3,
                                "name": "C++",
                                "type": "TECH"
                            },
                            {
                                "id": 18,
                                "name": "Team Management",
                                "type": "SOFT"
                            }
                        ]
                    }
                ]
        '500': 
          description: 'There has been a problem retrieving your matches. Please try again'
        '403':
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
                example:
                  'You are not authorized to retrieve this information'

  /message/{studentId}/{employerId}:
    get:
      security:
        - bearerAuth: []
      description: Returns all the messages in the database between a student and an employer in chronological order
      tags:
        - "Message"
      parameters:
        - in: path
          name: "studentId"
          required: true
          schema:
            type: integer
            example: 1
        - in: path
          name: "employerId"
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Message"
                type: array
                example:
                  [
                    {
                      student_id: 1,
                      employer_id: 1,
                      message: "Hi, I would like to work for your company",
                      send_date: "2020-11-10T12:30:00.000Z",
                      sender: "STUDENT"
                    },
                    {
                      student_id: 1,
                      employer_id: 1,
                      message: "hi, would you like to have an interview tomorrow?",
                      send_date: "2020-11-10T12:40:00.000Z",
                      sender: "EMPLOYER"
                    }
                  ]
        '400': 
          description: Bad Request
          content:
            text/html:
              schema:
                type: string
                example:
                  "Your request did not provided valid values for ids. Please try again."
        '500':
          description: Internal Server Error
          content: 
            text/html:
              schema:
                type: string
                example:
                  "There has been a problem looking for this conversation. Please try again"
        '403':
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
                example:
                  'You are not authorized to see this conversation'
    delete:
      security:
        - bearerAuth: []
      description: Delete the message
      tags:
        - "Message"
      parameters:
        - in: path
          required: true
          name: studentId
          schema:
            type: integer
            example: 1
        - in: path
          required: true
          name: placementId
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content: 
            application/json:
              schema:
                type: integer
                example: 1
        '403':
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
                example:
                  "You are not authorized to delete this match."


  /message:
    post: 
      security:
        - bearerAuth: []
      description: Allows the user to send a message to another user with whom he has a match
      tags: 
        - "Message"
      requestBody: 
        description: a json containing all the information about the message
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/Message"
              example:
                {
                  studentId: 1,
                  employerId: 1, 
                  message: "Thank you for offering me to do an interview.",
                  sendDate: "2020-11-10T12:50:00.000Z",
                  sender: "STUDENT"
                }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns a json with the newly inserted message
                allOf:
                  - $ref: "#/components/schemas/Message"
                type: object
                example:
                  {
                    student_id: 1,
                    employer_id: 1, 
                    message: "Thank you for offering me to do an interview.",
                    send_date: "2020-11-10T12:50:00.000Z",
                    sender: "STUDENT"
                  }
        '400':
          description: Bad Request
          content: 
            text/html: 
              schema:
                type: string
                example:
                  "Your request structure contains some mistakes. Please try again."
        '500':
          description: Internal Server Error
          content:
            text/html:
              schema:
                type: string
                example:
                  "There has been a problem saving your message. Please try again"
        '403':
          description: Forbidden
          content:
            text/html:
              schema:
                type: string
                example:
                  'You are not authorized to send this message'
