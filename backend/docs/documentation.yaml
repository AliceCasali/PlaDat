openapi: '3.0.2'
info:
  title: PlaDat APIs
  version: '1.0'
servers:
  - url: http://localhost:3000/
    description: Local development environment
  - url: https://pladat.herokuapp.com/
    description: Production backend server
  - url: https://pladat-staging.herokuapp.com/
    description: Staging backend server
  
tags:
  - name: Skills
    description: All the APIs related to the "skill" table
  - name: Majors
    description: All the APIs related to the "majors" table
  - name: Institutions
    description: All the APIs related to the "institutions" table
  - name: Degree
    description: All the APIs related to the "degree" table
  - name: Placement
    description: All the APIs related to the "placements" table
  - name: Student
    description: All the APIs related to the "student" table
  - name: Matching
    description: All the APIs related to the matching algorithm
  - name: Employer
    description: All the APIs related to the "employer" algorithm
  - name: Registration
    description: All the APIs related to the "registration" table

components:
  schemas:
    Student:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
        surname: 
          type: string
        email: 
          type: string
        password: 
          type: string
          format: password
        description: 
          type: string 
        skills:
          type: object
          properties: 
            technicalSkills: 
              type: array
              items:
                $ref: "#/components/schemas/Skill"
            softSkills: 
              type: array
              items:
                $ref: "#/components/schemas/Skill"
        work: 
          type: array
          items:
            $ref: "#/components/schemas/Work"
        education:
          type: array
          items: 
            $ref: "#/components/schemas/Education"


    Employer:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
        location: 
          type: string
        urllogo: 
          type: string 
    Match:
      type: object
      properties:
        studentID:
          type: integer
        placementID: 
          type: integer
        studentAccept: 
          type: boolean
        placementAccept:
          type: boolean
        status:
          type: string
          enum:
            - ACCEPTED
            - REJECTED
            - PENDING
    Placement:
      type: object
      properties:
        id:
          type: integer
        position: 
          type: string
        working_hours:
          type: integer
        start_period: 
          type: string
          format: date-time
        end_period:
          type: string
          format: date-time
        salary:
          type: integer
        description_role:
          type: string
        employer_id:
          type: integer
    Institution:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Major:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
    Skill:
      type: object
      properties:
        id:
          type: integer
        name: 
          type: string
        type:
          type: string
          enum:
            - TECH
            - SOFT
            - OTHER
    Registration:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password:
          type: string
        type:
          type: string
          enum: 
            - EMPLOYER
            - STUDENT
    Work:
      type: object
      properties:
        id:
          type: integer
        companyName:
          type: string
        position:
          type: string
        description:
          type: string
        workPeriod: 
          type: string
    Education: 
      type: object
      properties:
        id:
          type: integer
        majorId:
          type: integer
        degreeId:
          type: integer
        institutionId:
          type: integer
        description: 
          type: string
        period: 
          type: string
        
        
paths:
  /employer/{id}:
    get:
      description: Provides the employer for the provided id 
      tags:
        - "Employer"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/Employer"
                example: 
                  {
                    id: 1,
                    name: "Google",
                    location: "Milan, Italy",
                    urllogo: "www.pladat.eu"
                  }
  /employer/:employerId/placements:
    get:
      description: Provides all the placements of the selected employer id,
      tags:
        - "Employer"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                anyOf:
                  - $ref: "#/components/schemas/Placement"
                example:
                  [
                    {
                      id: 1,
                      position: "Full stack developer",
                      working_hours: 20,
                      start_period: "2020-11-11",
                      end_period: "2020-11-11",
                      salary: 600,
                      description_role: "An internship for you to learn how to be a full stack developer",
                      employer_id: 1,
                      count_matches: 3
                    }
                  ]
  /recommendation/{id}/seePlacements:
    get:
      description: Provides all the placements recommendation for the provided student id, based on the algorithm
      tags:
        - "Matching"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                anyOf:
                  - $ref: "#/components/schemas/Student"
                example:
                  [
                    {
                      id: 1,
                      name: "Julian",
                      surname: "Bass",
                      description: "Researching software development for large-scale systems focusing on multi-national teams and using modern lean and agile methods",
                      skills: {
                        technicalSkills: [
                          {id: 1, name: "Flutter", type: "TECH"},
                        ],
                        softSkills: [
                          {id: 4, name: "Team Management", type: "SOFT"},
                        ],
                        otherSkills: [
                          {id: 7, name: "Skiing", type: "OTHER"},
                        ]
                      }
                    }
                  ]
  /recommendation/{id}/seeStudents:
    get:
      description: Provides all the students recommendation for the provided placement id, based on the algorithm
      tags:
        - "Matching"
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                allOf:
                  - $ref: "#/components/schemas/Placement"
                example:
                  [
                    {
                      id: 1,
                      position: "Full stack developer",
                      working_hours: 20,
                      start_period: "2020-11-11",
                      end_period: "2020-11-11",
                      salary: 600,
                      description_role: "An internship for you to learn how to be a full stack developer",
                      employer_id: 1,
                      majors: [
                        {id: 1, name: "Computer Science and Engineering"},
                      ],
                      institutions: [
                        {id: 1, name: "Politecnico di Milano"},
                      ],
                      skills: {
                        technicalSkills: [
                          {id: 1, name: "Flutter", type: "TECH"},
                        ],
                        softSkills: [
                          {id: 4, name: "Team Management", type: "SOFT"},
                        ],
                        otherSkills: [
                          {id: 7, name: "Skiing", type: "OTHER"},
                        ]
                      }
                    }
                  ]
  /matching:
    post:
      description: Allows users to upsert the provided match to the matches table
      tags:
        - "Matching"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: {
                studentID: 1,
                placementID: 2,
                studentAccept: true
              }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Match"
                example:
                  {
                    studentID: 1,
                    placementID: 2,
                    studentAccept: true,
                    placementAccept: true,
                    status: "ACCEPTED"
                  }
  /placement:
    get:
      description: Returns all placement ids in the database 
      tags:
        - "Placement"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                example: 
                  [
                    {id: 1},
                    {id: 2},
                    {id: 3},
                    {id: 4},
                  ]
  /placement/{id}:
    get:
      description: Returns a placement with the provided id
      tags:
        - "Placement"
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                example: {
                    id: 1,
                    position: "Full stack developer",
                    working_hours: 20,
                    start_period: "2020-11-11",
                    end_period: "2020-11-11",
                    salary: 600,
                    description_role: "An internship for you to learn how to be a full stack developer",
                    employer_id: 1,
                    majors: [
                      {id: 1, name: "Computer Science and Engineering"},
                      {id: 2, name: "Management Engineering"},
                    ],
                    institutions: [
                      {id: 1, name: "Politecnico di Milano"},
                      {id: 1, name: "Politecnico di Torino"},
                    ],
                    skills: {
                      technicalSkills: [
                        {id: 1, name: "Flutter", type: "TECH"},
                        {id: 2, name: "JavaScript", type: "TECH"},
                        {id: 3, name: "Java", type: "TECH"},
                      ],
                      softSkills: [
                        {id: 4, name: "Team Management", type: "SOFT"},
                        {id: 5, name: "Time Management", type: "SOFT"},
                        {id: 6, name: "Communications", type: "SOFT"},
                      ],
                      otherSkills: [
                        {id: 7, name: "Skiing", type: "OTHER"},
                        {id: 8, name: "Cooking", type: "OTHER"},
                        {id: 9, name: "Trekking", type: "OTHER"},
                      ]
                    }
                  }

  /placement/new-placement:
    post:
      description: Allows companies to insert a new placement into the database
      tags:
        - "Placement"
      requestBody:
        description: a json containing all the information about the placement
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  position: "Full stack developer",
                  workingHours: 20,
                  startPeriod: "2020-11-11",
                  endPeriod: "2020-11-11",
                  salary: 600,
                  descriptionRole: "An internship for you to learn how to be a full stack developer",
                  employer_id: 1,
                  majors: [
                    {id: 1, name: "Computer Science and Engineering"},
                    {id: 2, name: "Management Engineering"},
                  ],
                  institutions: [
                    {id: 1, name: "Politecnico di Milano"},
                    {id: 1, name: "Politecnico di Torino"},
                  ],
                  skills: {
                    technicalSkills: [
                      {id: 1},
                      {id: 2},
                      {id: 3},
                    ],
                    softSkills: [
                      {id: 4},
                      {id: 5},
                      {id: 6},
                    ],
                    otherSkills: [
                      "Cooking",
                      "Organizing events",
                      "Trekking"
                    ]
                  }
                }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns a json with the newly inserted placement and its id
                type: object
                example:
                  {
                    id: 3,
                    position: "Full stack developer",
                    working_hours: 20,
                    start_period: "2020-11-11",
                    end_period: "2020-11-11",
                    salary: 600,
                    description_role: "An internship for you to learn how to be a full stack developer",
                    employer_id: 1,
                    majors: [
                      {id: 1, name: "Computer Science and Engineering"},
                      {id: 2, name: "Management Engineering"},
                    ],
                    institutions: [
                      {id: 1, name: "Politecnico di Milano"},
                      {id: 1, name: "Politecnico di Torino"},
                    ],
                    skills: {
                      technicalSkills: [
                        {id: 1},
                        {id: 2},
                        {id: 3},
                      ],
                      softSkills: [
                        {id: 4},
                        {id: 5},
                        {id: 6},
                      ],
                      otherSkills: [
                        "Cooking",
                        "Organizing events",
                        "Trekking"
                      ]
                    }
                  }
  /majors:
    get:
      description: Returns all the majors in the database
      tags: 
        - "Majors"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Major'
                type: array
                example:
                  [
                    {
                      id: 1,
                      name: "Computer Science and Engineering"
                    },
                    {
                      id: 2,
                      name: "Management Engineering"
                    }
                  ]
  /degrees:
    get:
      description: Returns all the degrees in the database
      tags: 
        - "Degree"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Degree'
                type: array
                example:
                  [
                    {
                      id: 1,
                      name: "Bachelor"
                    },
                    {
                      id: 2,
                      name: "Master"
                    }
                  ]

  /institutions:
    get:
      description: Returns all the institutions in the database
      tags:
        - "Institutions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Institution'
                type: array
                example:
                  [
                    {
                      id: 1,
                      name: "Politecnico di Milano"
                    },
                    {
                      id: 2,
                      name: "MDH"
                    },
                    {
                      id: 3,
                      name: "MIT"
                    }
                  ]
  
  /student:
    post:
      description: Allows students to fill in the details of their profile
      tags: 
        - "Student"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Student'
              type: object
              example:
                name: John
                surname: Dow
                email: aa@aaa.com
                description: I am a happy student
                phone: '5478929202'
                education:
                - majorId: 3
                  degreeId: 1
                  institutionId: 3
                  description: Difficult job
                  period: September 2020 - October 2021
                - majorId: 1
                  degreeId: 2
                  institutionId: 1
                  description: Difficult job
                  period: September 2020 - October 2021
                - majorId: 1
                  degreeId: 1
                  institutionId: 4
                  description: Difficult job
                  period: September 2020 - October 2021
                skills:
                  technicalSkills:
                  - id: 1
                  - id: 2
                  softSkills:
                  - id: 17
                  - id: 18
                work:
                - companyName: Google
                  position: Difficult Job
                  description: Difficult job
                  workPeriod: September 2020 - October 2021
                - companyName: Facebook
                  position: Very Difficult Job
                  description: Very Difficult job
                  workPeriod: September 2019 - December 2020

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns a json from the table matching the student id with the skills ids
                example: 
                  id: 129
                  name: John
                  surname: " Edu"
                  email: aa@aaa.com
                  description: desgn
                  phone: '5478929202'
                  skills:
                  - student: 129
                    skill: 1
                  - student: 129
                    skill: 2
                  - student: 129
                    skill: 17
                  - student: 129
                    skill: 18
                  work:
                  - id: 71
                    companyName: Google
                    position: Difficult Job
                    workPeriod: September 2020 - October 2021
                    description: Difficult job
                  - id: 72
                    companyName: Facebook
                    position: Very Difficult Job
                    workPeriod: September 2019 - December 2020
                    description: Very Difficult job
                  education:
                  - studentId: 129
                    educationId: 4
                    description: Difficult job
                    period: September 2020 - October 2021
                    majorId: 3
                    degreeId: 1
                    institutionId: 3
                  - studentId: 129
                    educationId: 5
                    description: Difficult job
                    period: September 2020 - October 2021
                    majorId: 1
                    degreeId: 2
                    institutionId: 1
                  - studentId: 129
                    educationId: 6
                    description: Difficult job
                    period: September 2020 - October 2021
                    majorId: 1
                    degreeId: 1
                    institutionId: 4
        '500':
          description: INTERNAL SERVER ERROR - Offers an explanation about what caused the error
          content:
            text/plain:
              text: Offers an explanation about what caused the error

  /skills:
    get: 
      description: Provides all the skills in the database 
      tags:
        - "Skills"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns a json with all the skills in the DB divided by TECH and SOFT
                type: object
                properties:
                  technicalSkills: 
                    description: All the technical skills in the database
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Skill'
                  softSkills: 
                    description: All the soft skills in the database
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Skill'
                example: {
                  technicalSkills: [
                    {
                      id: 4,
                      name: "JavaScript",
                      type: "TECH"
                    },
                    {
                      id: 5,
                      name: "Flutter",
                      type: "TECH"
                    },
                    {
                      id: 6,
                      name: "Heroku Management",
                      type: "TECH"
                    },
                  ],
                  softSkills: [
                    {
                      id: 1,
                      name: "Time Management",
                      type: "SOFT"
                    },
                    {
                      id: 2,
                      name: "Team Management",
                      type: "SOFT"
                    },
                    {
                      id: 3,
                      name: "Project Management",
                      type: "SOFT"
                    },
                  ]
                }
                
  /skills/{type}/{name}:
    get:
      description: Returns the skill in the database with the given name and type
      deprecated: true
      tags:
        - "Skills"
      parameters:
        - in: path
          required: true
          name: type
          schema:
            type: string
            example: "TECH"
        - in: path
          required: true
          name: name
          schema: 
            type: string
            example: "Flutter"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Skill"
                type: array
                example: 
                  [
                    {
                      id: 1,
                      name: "Flutter",
                      type: "TECH"
                    }
                  ]
  
  /skills/{type}:
    get:
      description: Returns all the skills in the database with the given type
      tags:
        - "Skills"
      parameters:
        - in: path
          name: "type"
          required: true
          schema:
            type: string
            example: "TECH"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Skill"
                type: array
                example: 
                  [
                    {
                      id: 1,
                      name: "JavaScript",
                      type: "TECH"
                    },
                    {
                      id: 2,
                      name: "Flutter",
                      type: "TECH"
                    }
                  ]
  /registration:
    post:
      description: Allows users to register to the application
      tags:
        - "Registration"
      requestBody:
        description: a json containing all the information about the user
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                {
                  email: "paolo@gmail.com",
                  password: "Iloveyou_3000",
                  type: "STUDENT"

                }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Returns a json with the newly inserted user, without the hashed password
                type: object
                example:
                  {
                    id: 2,
                    email: "paolo@gmail.com",
                    type: "STUDENT"
                  }
        '500':
          description: 'There has been a problem saving your registration. Please try again'

  /student/{studentId}/placements:
    get:
      description: Returns all the placements that a student has been matched with
      tags: 
        - "Matching"
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
          example: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    placementId: 
                      type: integer
                    position:
                      type: string
                    description_role:
                      type: string
                    employerId:
                      type: integer
                    employerName:
                      type: string
                example:
                  [
                    {
                        "placementId": 63,
                        "position": "Fullstack Developer",
                        "description_role": "This is a good job",
                        "employerId": 43,
                        "employerName": "Google"
                    },
                    {
                        "placementId": 61,
                        "position": "Frontend Developer",
                        "description_role": "This is a good job",
                        "employerId": 43,
                        "employerName": "Google"
                    }
                ]
        '500': 
          description: 'There has been a problem retrieving your matches. Please try again'
                
